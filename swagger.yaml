openapi: 3.0.0
info:
  title: University Management API
  version: 1.0.0
  description: API for managing university data such as students, courses, faculty, and departments
servers:
  - url: http://localhost:5000/api

paths:
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authenticated requests

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/logout:
    get:
      summary: Logout the current user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /auth/profile:
    get:
      summary: Get user profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile of the authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /students:
    get:
      summary: Get all students
      tags:
        - Students
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      summary: Create a new student
      tags:
        - Students
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

  /students/{studentId}:
    get:
      summary: Get a student by ID
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
    put:
      summary: Update a student by ID
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
    delete:
      summary: Delete a student by ID
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student deleted successfully

  /courses:
    get:
      summary: Get all courses
      tags:
        - Courses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      summary: Create a new course
      tags:
        - Courses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /courses/{courseId}:
    get:
      summary: Get a course by ID
      tags:
        - Courses
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    put:
      summary: Update a course by ID
      tags:
        - Courses
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course updated successfully
    delete:
      summary: Delete a course by ID
      tags:
        - Courses
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course deleted successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        id: "60c72b2f9b1d4a6a3c8e4b2e"
        username: "john_doe"
        email: "john.doe@example.com"
        createdAt: "2023-10-01T10:00:00Z"
        updatedAt: "2023-10-01T10:00:00Z"

    Student:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        enrollmentNumber:
          type: string

    Course:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        department:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
